{"version":3,"sources":["scripts/main.js"],"names":["phoneDetails","BASE_URL","DETAILS_URL","body","document","querySelector","phonesId","getPhones","fetch","then","response","ok","json","Promise","reject","Error","status","statusText","getFirstReceivedDetails","phones","forEach","phone","push","id","map","itemId","createTable","race","result","addPhoneToList","name","catch","error","getAllSuccessfulDetails","allSettled","results","value","className","headerText","table","createElement","prepend","insertAdjacentHTML","phonesName"],"mappings":";AAAA,aAEA,IAMIA,EANEC,EACF,wEACEC,EACF,oEACEC,EAAOC,SAASC,cAAc,QAC9BC,EAAW,GAGXC,EAAY,WACTC,OAAAA,MAAMP,GACVQ,KAAK,SAAAC,GACA,OAACA,EAASC,GAKPD,EAASE,OAJPC,QAAQC,OACb,IAAIC,MAASL,GAAAA,OAAAA,EAASM,OAAUN,KAAAA,OAAAA,EAASO,iBAO7CC,EAA0B,WAC9BX,IACGE,KAAK,SAAAU,GACJA,EAAOC,QAAQ,SAAAC,GAASf,OAAAA,EAASgB,KAAKD,EAAME,MAE5CvB,EAAeM,EAASkB,IAAI,SAAAC,GAC1BjB,OAAAA,MAASN,GAAAA,OAAAA,GAAcuB,OAAAA,EAAvB,UACGhB,KAAK,SAAAC,GAAYA,OAAAA,EAASE,WAE/Bc,EAAY,iBAAkB,kBAE9Bb,QAAQc,KAAK3B,GACVS,KAAK,SAAAmB,GACJC,OAAAA,EAAe,iBAAkBD,EAAOE,UAE7CC,MAAM,SAAAC,GAAS,OAAA,IAAIjB,MAAMiB,MAG9Bd,IAEA,IAAMe,EAA0B,WAC9B1B,IACGE,KAAK,SAAAU,GACJA,EAAOC,QAAQ,SAAAC,GAASf,OAAAA,EAASgB,KAAKD,EAAME,MAE5CvB,EAAeM,EAASkB,IAAI,SAAAC,GAC1BjB,OAAAA,MAASN,GAAAA,OAAAA,GAAcuB,OAAAA,EAAvB,UACGhB,KAAK,SAAAC,GAAYA,OAAAA,EAASE,WAE/Bc,EAAY,iBAAkB,kBAE9Bb,QAAQqB,WAAWlC,GAChBS,KAAK,SAAA0B,GACJA,EAAQf,QAAQ,SAAAQ,GACQ,cAAlBA,EAAOZ,QACTa,EAAe,iBAAkBD,EAAOQ,MAAMN,aAS5D,SAASJ,EAAYW,EAAWC,GACxBC,IAAAA,EAAQnC,SAASoC,cAAc,SAErCD,EAAMF,UAAYA,EAClBlC,EAAKsC,QAAQF,GAEbA,EAAMG,mBAAmB,YAEfJ,yBAAAA,OAAAA,EAFV,wBAOF,SAAST,EAAeQ,EAAWM,GACjCvC,SAASC,cAAkBgC,IAAAA,OAAAA,IAAaK,mBAAmB,YAEjDC,yBAAAA,OAAAA,EAFV,qBAhBFV","file":"main.f340daf8.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst BASE_URL\n  = 'https://mate-academy.github.io/phone-catalogue-static/api/phones.json';\nconst DETAILS_URL\n  = 'https://mate-academy.github.io/phone-catalogue-static/api/phones/';\nconst body = document.querySelector('body');\nconst phonesId = [];\nlet phoneDetails;\n\nconst getPhones = () => {\n  return fetch(BASE_URL)\n    .then(response => {\n      if (!response.ok) {\n        return Promise.reject(\n          new Error(`${response.status}-${response.statusText}`));\n      }\n\n      return response.json();\n    });\n};\n\nconst getFirstReceivedDetails = () => {\n  getPhones()\n    .then(phones => {\n      phones.forEach(phone => phonesId.push(phone.id));\n\n      phoneDetails = phonesId.map(itemId =>\n        fetch(`${DETAILS_URL}${itemId}.json`)\n          .then(response => response.json()));\n\n      createTable('first-received', 'First Received');\n\n      Promise.race(phoneDetails)\n        .then(result =>\n          addPhoneToList('first-received', result.name));\n    })\n    .catch(error => new Error(error));\n};\n\ngetFirstReceivedDetails();\n\nconst getAllSuccessfulDetails = () => {\n  getPhones()\n    .then(phones => {\n      phones.forEach(phone => phonesId.push(phone.id));\n\n      phoneDetails = phonesId.map(itemId =>\n        fetch(`${DETAILS_URL}${itemId}.json`)\n          .then(response => response.json()));\n\n      createTable('all-successful', 'All Successful');\n\n      Promise.allSettled(phoneDetails)\n        .then(results => {\n          results.forEach(result => {\n            if (result.status === 'fulfilled') {\n              addPhoneToList('all-successful', result.value.name);\n            }\n          });\n        });\n    });\n};\n\ngetAllSuccessfulDetails();\n\nfunction createTable(className, headerText) {\n  const table = document.createElement('table');\n\n  table.className = className;\n  body.prepend(table);\n\n  table.insertAdjacentHTML('beforeend', `\n    <tr>\n      <th>${headerText}</th>\n    </tr>\n `);\n};\n\nfunction addPhoneToList(className, phonesName) {\n  document.querySelector(`.${className}`).insertAdjacentHTML('beforeend', `\n    <tr>\n      <td>${phonesName}</td>\n    </tr>`);\n};\n"]}